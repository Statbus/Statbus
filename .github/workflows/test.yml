name: Deploy Test

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  # everything else disabled by default
  packages: none
  pull-requests: none

jobs:
  build-and-ship:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Build Docker image (no push)
      #   run: |
      #     docker build -t statbus-test:latest .

      - name: Build Docker image with Buildx (cache enabled)
        run: |
          docker buildx build \
            --tag statbus-test:latest \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            --load .  # <-- ensures image is available locally for docker save

      - name: Save image as classic tar
        run: docker save statbus-test:latest -o statbus-test.tar

      - name: Rsync image to remote server
        uses: burnett01/rsync-deployments@6.0.0
        with:
          switches: -avz --progress
          path: ${{ github.workspace }}/statbus-test.tar
          remote_path: $HOME/statbus-test.tar
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: SSH and deploy container with docker-compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -e

            echo "Stop old container"
            docker compose -f ~/serv/docker-compose.yml stop statbus-test || true
            docker compose -f ~/serv/docker-compose.yml rm -f statbus-test || true
            docker image rm statbus-test:latest --force || true

            echo "Load new image"
            docker image load --input $HOME/statbus-test.tar
            rm -f $HOME/statbus-test.tar

            echo "Deploy container"
            cd ~/serv
            docker compose -f ~/serv/docker-compose.yml up -d statbus-test

            echo "Run migrations"
            docker compose -f ~/serv/docker-compose.yml exec -T statbus-test php bin/console doctrine:migrations:migrate --no-interaction --em=statbus

            echo "Clear cache"
            docker compose -f ~/serv/docker-compose.yml exec -T statbus-test php bin/console cache:clear

            echo "✅ Test deployment done via Traefik!"

  render-assets:
    runs-on: ubuntu-latest
    needs: build-and-ship

    steps:
      - name: SSH and render assets from tgstation
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -e

            echo "Remove generated assets"
            rm -rf ~/serv/www/test.statbus.space/public/icons
            rm -rf ~/serv/www/test.statbus.space/public/maps


            echo "Update tgstation repo"
            cd ~/tgstation
            git reset --hard HEAD
            git pull


            echo "Render icons"
            docker compose -f ~/serv/docker-compose.yml exec -T statbus-test php bin/console app:render-icons


            echo "Render maps"
            docker compose -f ~/serv/docker-compose.yml exec -T statbus-test php -d memory_limit=512M bin/console app:render-minimaps


            echo "✅ Badger icons and minimaps have been rendered!"
